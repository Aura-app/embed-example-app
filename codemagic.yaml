workflows:
  expo-embed-build:
    name: Expo Embed Build & Publish
    max_build_duration: 60

    environment:
      groups:
        - expo-embed

      vars:
        EXPO_SDK_VERSION: "53.0.0"
        NODE_VERSION: "18"

      node: 18.17.0
      xcode: latest
      cocoapods: default

    cache:
      cache_paths:
        - $HOME/.npm
        - $HOME/Library/Caches/CocoaPods
        - node_modules
        - $HOME/.gradle/caches

    triggering:
      events: [] # Manual trigger only

    scripts:
      - name: Install dependencies
        script: |
          npm ci

      - name: Expo prebuild (generate ios/ and android/)
        script: |
          npx expo prebuild --clean --platform all

      - name: Install iOS dependencies
        script: |
          cd ios && pod install

      # - name: Decode Android Keystore
      #   script: |
      #     mkdir -p android/app
      #     echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > android/app/keystore.jks

      # - name: Build Android (AAB)
      #   script: |
      #     cd android
      #     ./gradlew bundleRelease \
      #       -Pandroid.injected.signing.store.file=keystore.jks \
      #       -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
      #       -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
      #       -Pandroid.injected.signing.key.password=$KEY_PASSWORD
      #     cd ..

      - name: Install iOS dependencies with Swift fix
        script: |
          cd ios
          
          # Modify existing Podfile to add Swift optimization fix
          # Remove any existing post_install end and add our fix
          sed -i '' '/^end$/d' Podfile
          
          cat >> Podfile << 'EOF'
  
          # Fix Swift optimization for Release builds
          post_install do |installer|
            react_native_post_install(
              installer,
              config[:reactNativePath],
              :mac_catalyst_enabled => false
            )
    
              # Fix Swift optimization issue
              installer.pods_project.targets.each do |target|
                target.build_configurations.each do |config|
                  if config.name == 'Release'
                    config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
                  end
                end
              end
            end
          end
          EOF
          
          pod install

      - name: Build iOS (IPA)
        script: |
          cd ios
          
          # Debug: List available workspaces/projects
          echo "Available iOS project files:"
          ls -la *.xcworkspace *.xcodeproj 2>/dev/null || echo "None found"
          
          # Find the correct workspace name
          WORKSPACE_PATH=$(find . -name "*.xcworkspace" -type d | head -1)
          if [ -z "$WORKSPACE_PATH" ]; then
            echo "No workspace found, looking for project"
            PROJECT_PATH=$(find . -name "*.xcodeproj" -type d | head -1)
            if [ -z "$PROJECT_PATH" ]; then
              echo "No Xcode project found!"
              exit 1
            fi
          fi
          
          # Create directories
          mkdir -p build/ipa
          
          # Create export options
          cat > export_options.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>stripSwiftSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Build based on what we found
          if [ -n "$WORKSPACE_PATH" ]; then
            WORKSPACE_NAME=$(basename "$WORKSPACE_PATH")
            echo "Building with workspace: $WORKSPACE_NAME"
            xcodebuild -workspace "$WORKSPACE_NAME" \
              -scheme AuraEmbedApp \
              -configuration Release \
              -destination "generic/platform=iOS" \
              -archivePath "build/app.xcarchive" \
              archive
          else
            PROJECT_NAME=$(basename "$PROJECT_PATH")
            echo "Building with project: $PROJECT_NAME"
            xcodebuild -project "$PROJECT_NAME" \
              -scheme AuraEmbedApp \
              -configuration Release \
              -destination "generic/platform=iOS" \
              -archivePath "build/app.xcarchive" \
              archive
          fi
          
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath "build/app.xcarchive" \
            -exportPath "build/ipa" \
            -exportOptionsPlist export_options.plist
          
          # Debug: Check what was created
          echo "Build output:"
          ls -la build/
          ls -la build/ipa/ 2>/dev/null || echo "No ipa directory"

    artifacts:
      - ios/build/ipa/*.ipa
      # - android/app/build/outputs/bundle/release/*.aab

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER  
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        submit_to_app_store: false

      # google_play:
      #   credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
      #   track: internal
      #   submit_as_draft: false

      email:
        recipients:
          - kutbip@aura.services
        notify:
          success: true
          failure: true
