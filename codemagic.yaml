workflows:
  expo-embed-build:
    name: Expo Embed Build & Publish
    max_build_duration: 60

    # integrations:
    #   app_store_connect: AuraEmbedApp

    environment:
      groups:
        - expo-embed

      ios_signing:
        distribution_type: app_store
        bundle_identifier: $BUNDLE_ID

      vars:
        EXPO_SDK_VERSION: "53.0.0"
        NODE_VERSION: "18"

      node: 18.17.0
      xcode: latest
      cocoapods: default

    cache:
      cache_paths:
        - $HOME/.npm
        - $HOME/Library/Caches/CocoaPods
        - node_modules
        - $HOME/.gradle/caches

    triggering:
      events: [] # Manual trigger only

    scripts:
      - name: Install dependencies
        script: |
          npm ci

      - name: Expo prebuild (generate ios/ and android/)
        script: |
          npx expo prebuild --clean --platform all

      - name: Decode Android Keystore
        script: |
          mkdir -p android/app
          echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > android/app/keystore.jks

      - name: Build Android (AAB)
        script: |
          cd android
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=keystore.jks \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          cd ..

      - name: Install iOS dependencies with Swift fix
        script: |
          cd ios
          
          # First install pods normally
          pod install
          
          # Then directly modify the Pods project to fix Swift optimization
          ruby << 'RUBY_SCRIPT'
          require 'xcodeproj'

          puts "Applying Swift optimization fix to Pods project..."

          project_path = 'Pods/Pods.xcodeproj'
          if File.exist?(project_path)
            project = Xcodeproj::Project.open(project_path)
            
            project.targets.each do |target|
              target.build_configurations.each do |config|
                if config.name == 'Release'
                  config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
                  puts "Fixed #{target.name} - #{config.name}"
                end
              end
            end
            
            project.save
            puts "Swift optimization fix applied successfully"
          else
            puts "Pods project not found at #{project_path}"
            exit 1
          end
          RUBY_SCRIPT

      - name: Build iOS (IPA)
        script: |
          cd ios
          
          # Find workspace
          WORKSPACE_PATH=""
          for file in *.xcworkspace; do
            if [ -d "$file" ]; then
              WORKSPACE_PATH="$file"
              break
            fi
          done
          
          echo "Found workspace: $WORKSPACE_PATH"
          
          # Create directories
          mkdir -p build/ipa
          
          # Build - Codemagic handles code signing automatically
          set -o pipefail
          xcodebuild -workspace "$WORKSPACE_PATH" \
            -scheme AuraEmbedApp \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "build/app.xcarchive" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            archive 2>&1 | tee xcodebuild.log
          
          BUILD_RESULT=${PIPESTATUS[0]}
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "=== BUILD FAILED ==="
            tail -100 xcodebuild.log
            grep -i "error:" xcodebuild.log | tail -20
            exit $BUILD_RESULT
          fi
          
          # Verify archive
          if [ ! -d "build/app.xcarchive" ]; then
            echo "ERROR: Archive not created"
            exit 1
          fi
          
          # Export IPA - Codemagic handles export options automatically
          echo "=== Exporting IPA ==="
          xcodebuild -exportArchive \
            -archivePath "build/app.xcarchive" \
            -exportPath "build/ipa" \
            -exportOptionsPlist $FCI_EXPORT_OPTIONS_FILE
          
          echo "=== Build complete ==="
          ls -laR build/

    artifacts:
      - build/ios/ipa/*.ipa
      - build/app/outputs/**/*.aab
      - build/app/outputs/**/*.apk

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER  
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        submit_to_app_store: false
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
        submit_as_draft: false
      email:
        recipients:
          - kutbip@aura.services
        notify:
          success: true
          failure: true
