workflows:
  expo-embed-build:
    name: Expo Embed Build & Publish
    max_build_duration: 60

    environment:
      groups:
        - expo-embed

      vars:
        APPLE_TEAM_ID: "27XW93998V"
        EXPO_SDK_VERSION: "53.0.0"
        NODE_VERSION: "18"

      node: 18.17.0
      xcode: latest
      cocoapods: default

    cache:
      cache_paths:
        - $HOME/.npm
        - $HOME/Library/Caches/CocoaPods
        - node_modules
        - $HOME/.gradle/caches

    triggering:
      events: [] # Manual trigger only

    scripts:
      - name: Persist App Store secrets
        script: |
          mkdir -p /tmp/secrets
          echo "$APP_STORE_CONNECT_ISSUER_ID" > /tmp/secrets/issuer_id.txt
          echo "$APP_STORE_CONNECT_KEY_IDENTIFIER" > /tmp/secrets/key_id.txt
          printf "%s" "$APP_STORE_CONNECT_PRIVATE_KEY" > /tmp/secrets/appstore_private_key.pem
          printf "%s" "$CERTIFICATE_PRIVATE_KEY" > /tmp/secrets/cert_private_key.pem
          echo "Secrets persisted under /tmp/secrets/"
          
      - name: Install dependencies
        script: |
          npm ci

      - name: Expo prebuild (generate ios/ and android/)
        script: |
          npx expo prebuild --clean --platform all

      # - name: Install iOS dependencies
      #   script: |
      #     cd ios && pod install

      # - name: Decode Android Keystore
      #   script: |
      #     mkdir -p android/app
      #     echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > android/app/keystore.jks

      # - name: Build Android (AAB)
      #   script: |
      #     cd android
      #     ./gradlew bundleRelease \
      #       -Pandroid.injected.signing.store.file=keystore.jks \
      #       -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
      #       -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
      #       -Pandroid.injected.signing.key.password=$KEY_PASSWORD
      #     cd ..

      - name: Install iOS dependencies with Swift fix
        script: |
          cd ios
          
          # First install pods normally
          pod install
          
          # Then directly modify the Pods project to fix Swift optimization
          ruby << 'RUBY_SCRIPT'
          require 'xcodeproj'

          puts "Applying Swift optimization fix to Pods project..."

          project_path = 'Pods/Pods.xcodeproj'
          if File.exist?(project_path)
            project = Xcodeproj::Project.open(project_path)
            
            project.targets.each do |target|
              target.build_configurations.each do |config|
                if config.name == 'Release'
                  config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
                  puts "Fixed #{target.name} - #{config.name}"
                end
              end
            end
            
            project.save
            puts "Swift optimization fix applied successfully"
          else
            puts "Pods project not found at #{project_path}"
            exit 1
          end
          RUBY_SCRIPT

      - name: Build iOS (IPA)
        script: |
          cd ios
          
          # Debug: Show actual files
          echo "=== Contents of ios/ directory ==="
          ls -la
          
          # Find workspace or project
          WORKSPACE_PATH=""
          PROJECT_PATH=""
          
          for file in *.xcworkspace; do
            if [ -d "$file" ]; then
              WORKSPACE_PATH="$file"
              break
            fi
          done
          
          if [ -z "$WORKSPACE_PATH" ]; then
            for file in *.xcodeproj; do
              if [ -d "$file" ]; then
                PROJECT_PATH="$file"
                break
              fi
            done
          fi
          
          echo "Found workspace: $WORKSPACE_PATH"
          echo "Found project: $PROJECT_PATH"
          
          # Create directories
          mkdir -p build/ipa
          
          # Create export options
          cat > export_options.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>stripSwiftSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Build with code signing
          set -o pipefail
          if [ -n "$WORKSPACE_PATH" ]; then
            echo "Building with workspace: $WORKSPACE_PATH"
            xcodebuild -workspace "$WORKSPACE_PATH" \
              -scheme AuraEmbedApp \
              -configuration Release \
              -destination "generic/platform=iOS" \
              -archivePath "build/app.xcarchive" \
              -allowProvisioningUpdates \
              DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
              archive 2>&1 | tee xcodebuild.log
            
            BUILD_RESULT=${PIPESTATUS[0]}
            if [ $BUILD_RESULT -ne 0 ]; then
              echo "=== BUILD FAILED ==="
              echo "Showing last 100 lines of build log:"
              tail -100 xcodebuild.log
              echo "=== Searching for errors ==="
              grep -i "error:" xcodebuild.log | tail -20
              exit $BUILD_RESULT
            fi
          elif [ -n "$PROJECT_PATH" ]; then
            echo "Building with project: $PROJECT_PATH"
            xcodebuild -project "$PROJECT_PATH" \
              -scheme AuraEmbedApp \
              -configuration Release \
              -destination "generic/platform=iOS" \
              -archivePath "build/app.xcarchive" \
              -allowProvisioningUpdates \
              DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
              archive 2>&1 | tee xcodebuild.log
            
            BUILD_RESULT=${PIPESTATUS[0]}
            if [ $BUILD_RESULT -ne 0 ]; then
              echo "=== BUILD FAILED ==="
              echo "Showing last 100 lines of build log:"
              tail -100 xcodebuild.log
              echo "=== Searching for errors ==="
              grep -i "error:" xcodebuild.log | tail -20
              exit $BUILD_RESULT
            fi
          else
            echo "ERROR: No .xcworkspace or .xcodeproj found!"
            exit 1
          fi
          
          # Verify archive was created
          if [ ! -d "build/app.xcarchive" ]; then
            echo "ERROR: Archive was not created at build/app.xcarchive"
            exit 1
          fi
          
          # Export IPA
          echo "=== Exporting IPA ==="
          xcodebuild -exportArchive \
            -archivePath "build/app.xcarchive" \
            -exportPath "build/ipa" \
            -exportOptionsPlist export_options.plist \
            -allowProvisioningUpdates
          
          # Debug: Check what was created
          echo "=== Build output ==="
          ls -laR build/

    artifacts:
      - ios/build/ipa/*.ipa
      # - android/app/build/outputs/bundle/release/*.aab

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER  
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        submit_to_app_store: false

      # google_play:
      #   credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
      #   track: internal
      #   submit_as_draft: false

      email:
        recipients:
          - kutbip@aura.services
        notify:
          success: true
          failure: true
