workflows:
  expo-embed-build:
    name: Expo Embed Build & Publish
    max_build_duration: 60

    environment:
      groups:
        - expo-embed

      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.aura.embedapp

      vars:
        EXPO_SDK_VERSION: "53.0.0"
        NODE_VERSION: "18"

      node: 18.17.0
      xcode: latest
      cocoapods: default

    cache:
      cache_paths:
        - $HOME/.npm
        - $HOME/Library/Caches/CocoaPods
        - node_modules
        - $HOME/.gradle/caches

    triggering:
      events: [] # Manual trigger only

    scripts:
      - name: Install dependencies
        script: |
          npm ci

      - name: Expo prebuild (generate ios/ and android/)
        script: |
          npx expo prebuild --clean --platform all

      - name: Install iOS dependencies with Swift fix
        script: |
          cd ios
          
          # First install pods normally
          pod install
          
          # Then directly modify the Pods project to fix Swift optimization
          ruby << 'RUBY_SCRIPT'
          require 'xcodeproj'

          puts "Applying Swift optimization fix to Pods project..."

          project_path = 'Pods/Pods.xcodeproj'
          if File.exist?(project_path)
            project = Xcodeproj::Project.open(project_path)
            
            project.targets.each do |target|
              target.build_configurations.each do |config|
                if config.name == 'Release'
                  config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
                  puts "Fixed #{target.name} - #{config.name}"
                end
              end
            end
            
            project.save
            puts "Swift optimization fix applied successfully"
          else
            puts "Pods project not found at #{project_path}"
            exit 1
          end
          RUBY_SCRIPT

      - name: Set up iOS code signing
        script: |
          # Initialize keychain
          keychain initialize
          
          # Add certificates from Codemagic
          keychain add-certificates
          
          # Apply provisioning profiles
          xcode-project use-profiles

      # - name: Build iOS (IPA)
      #   script: |
      #     cd ios
          
      #     # Find workspace
      #     WORKSPACE_PATH=""
      #     for file in *.xcworkspace; do
      #       if [ -d "$file" ]; then
      #         WORKSPACE_PATH="$file"
      #         break
      #       fi
      #     done
          
      #     echo "Building with workspace: $WORKSPACE_PATH"
          
      #     # Create directories
      #     mkdir -p build/ipa
          
      #     # Build with proper code signing
      #     set -o pipefail
      #     xcodebuild -workspace "$WORKSPACE_PATH" \
      #       -scheme AuraEmbedApp \
      #       -configuration Release \
      #       -archivePath "build/app.xcarchive" \
      #       clean archive 2>&1 | tee xcodebuild.log
          
      #     BUILD_RESULT=${PIPESTATUS[0]}
      #     if [ $BUILD_RESULT -ne 0 ]; then
      #       echo "=== BUILD FAILED ==="
      #       tail -100 xcodebuild.log
      #       grep -i "error:" xcodebuild.log | tail -20
      #       exit $BUILD_RESULT
      #     fi
          
      #     # Export IPA
      #     echo "=== Exporting IPA ==="
      #     xcodebuild -exportArchive \
      #       -archivePath "build/app.xcarchive" \
      #       -exportPath "build/ipa" \
      #       -exportOptionsPlist $FCI_EXPORT_OPTIONS_FILE
          
      #     echo "=== Build complete ==="
      #     ls -la build/ipa/

      - name: Build iOS (IPA)
        script: |
          xcode-project build-ipa \
            --workspace "ios/AuraEmbedApp.xcworkspace" \
            --scheme "AuraEmbedApp" \
            --export-method app-store

      - name: Decode Android Keystore
        script: |
          # Decode keystore to project root
          echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > $CM_BUILD_DIR/keystore.jks
          echo "Keystore saved to: $CM_BUILD_DIR/keystore.jks"
          ls -la $CM_BUILD_DIR/keystore.jks

      - name: Build Android (AAB)
        script: |
          cd android
          chmod +x gradlew
          
          # Build with absolute keystore path
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=$CM_BUILD_DIR/keystore.jks \
            -Pandroid.injected.signing.store.password="$ANDROID_KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$ANDROID_KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$ANDROID_KEY_PASSWORD"
          
          echo "=== Android build complete ==="
          ls -la app/build/outputs/bundle/release/

    artifacts:
      - ios/build/ipa/*.ipa
      - android/app/build/outputs/bundle/release/*.aab

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER  
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        submit_to_app_store: false
        
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
        submit_as_draft: false
        
      email:
        recipients:
          - kutbip@aura.services
        notify:
          success: true
          failure: true